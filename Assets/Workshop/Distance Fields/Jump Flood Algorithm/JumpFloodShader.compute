// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel LaplaceKernel
#pragma kernel ResetKernel
#pragma kernel ClearTextureKernel
#pragma kernel WriteImageKernel
#pragma kernel SignKernel
#pragma kernel LuminanceKernel
#pragma kernel JFAInitKernel
#pragma kernel JFAStepKernel
#pragma kernel JFARenderKernel
#pragma kernel JFAGradientKernel

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> inTex;
RWTexture2D<float4> outTex;
SamplerState sampler_inTex;
float4 imageDisplacement;
int rez;
int jumpSize;
float textureRotation;
float textureScale;

float laplaceTap[9] = {
    //this becomes all zeroes when running for some reason
    - 1., -1., -1.,
    - 1., -8., -1.,
    - 1., -1., -1.
};

//"reset" kernel, I don't think I use this
[numthreads(16, 16, 1)]
void ResetKernel(uint3 id: SV_DispatchThreadID)
{
    outTex[id.xy] = float4(0, 1, 0, 1);
}

//Clear a Texture
[numthreads(32, 32, 1)]
void ClearTextureKernel(uint3 id: SV_DISPATCHTHREADID)
{
    outTex[id.xy] = float4(0, 0, 0, 0);
}

float2 rotate2D(float2 uv, float rotation)
{
    return float2(
        uv.x * cos(rotation) - uv.y * sin(rotation),
        uv.x * sin(rotation) + uv.y * cos(rotation)
    );
}

//Write the image to the texture based on some offset imageDisplacement vector.
// TO DO: make more complicated
[numthreads(16, 16, 1)]
void WriteImageKernel(uint3 id: SV_DISPATCHTHREADID)
{
    //inTex is the image we want to use
    float2 samplePos = float2(id.xy);
    
    samplePos = samplePos - float2(rez * .5, rez * .5);
    samplePos = samplePos + imageDisplacement.xy;
    samplePos = rotate2D(samplePos, textureRotation);
    samplePos = samplePos * textureScale;
    
    
    //Repeat
    samplePos.x = (samplePos.x + rez) % rez;
    samplePos.y = (samplePos.y + rez) % rez;
    
    outTex[id.xy] = inTex[round(samplePos.xy)];
}

//Read Image and convert to luminance
// DOES NOT USE inTex because it avoids race condition problems
// based on https://www.w3.org/TR/AERT/#color-contrast
[numthreads(16, 16, 1)]
void LuminanceKernel(uint3 id: SV_DISPATCHTHREADID)
{
    float4 col = outTex[id.xy];
    outTex[id.xy] = float4(col.r * .299, col.g * .587, col.b * .114, col.a);
}

//Performs a laplacian kernel
[numthreads(16, 16, 1)]
void LaplaceKernel(uint3 id: SV_DispatchThreadID)
{
    float4 acc = float4(0., 0., 0., 0.);
    float2 rvec = float2(rez, rez);
    acc += -1 * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(0, 1)) / rvec, 0.);
    acc += -1 * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(-1, 0)) / rvec, 0.);
    acc += -1 * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(1, 0)) / rvec, 0.);
    acc += -1 * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(0, -1)) / rvec, 0.);
    
    
    acc += 8. * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(0, 0)) / rvec, 0.);
    
    acc += -1. * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(-1, 1)) / rvec, 0.);
    acc += -1. * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(1, 1)) / rvec, 0.);
    acc += -1. * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(-1, -1)) / rvec, 0.);
    acc += -1. * inTex.SampleLevel(sampler_inTex, float2(id.xy + int2(1, -1)) / rvec, 0.);
    
    float4 result = float4(0., 0., 0., 0.);
    // in the general case we can use 0. because we just want to confirm anything
    //in the case where we want to use webcams... we can separate on white
    if (length(acc) > 0.)//use the length
    {
        result = acc;//float4(1., 1., 1., 1.);
    }
    outTex[id.xy] = result;
}


// Apply sign to the distance, negative if inside, positive if outside
//inTex is original mask, outtex is the distance field.
[numthreads(16, 16, 1)]
void SignKernel(uint3 id: SV_DISPATCHTHREADID)
{
    //where inTex is the original image mask.
    float sign = inTex[id.xy].a > 0. ? - 1.: 1.; //if pixels exist then we're inside, and negative
    float4 result = float4(outTex[id.xy].xyz, sign);
    outTex[id.xy] = result;
}

//Initialize JFA to add the positions to the pixels
[numthreads(16, 16, 1)]
void JFAInitKernel(uint3 id: SV_DISPATCHTHREADID)
{
    //Note that the initial result can't be something like 0,0 because these are all supposed to be position values
    float4 position = float4(-9999., -9999., 0., 0.);
    float4 sample = inTex[id.xy];
    
    float value = length(sample); //no need for sampler, we need to be direct
    
    if (value > 0.)
    {
        //if we're on the edge, then store the position
        position = float4(id.xy, 0., 0.);
    }
    
    //encode into texture
    outTex[id.xy] = position;
}

//Perform the JFA steps  by a power of 2 jumpsize descent.
[numthreads(16, 16, 1)]
void JFAStepKernel(uint3 id: SV_DISPATCHTHREADID)
{
    float2 rvec = float2(rez, rez);
    
    float4 currentSample = inTex[id.xy];
    float2 closest_match = currentSample.xy;
    float best_distance = 99999999.0;
    
    //Perform 9 sample check in toroidal space
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            int2 direction = int2(x, y) * jumpSize; //jumpSize set in C#
            
            int2 sample = id.xy + direction;
            
            //wrap positions
            sample.x = (sample.x + rez) % rez;
            sample.y = (sample.y + rez) % rez;
            
            float2 sampledPosition = inTex[sample.xy].xy; //get the sample position
            
            //compare against current position;
            float d = distance(float2(id.xy), sampledPosition);
            
            //If any found position is closer, update the best distance and the closest match
            if (d < best_distance)
            {
                best_distance = d;
                closest_match = sampledPosition;
            }
        }
    }
    //values are encoded as
    // x: x position of closest
    // y: y position of closest
    // z: current distance
    // w: unused
    outTex[id.xy] = float4(closest_match, best_distance, 1.);
}


//Render the Texture into something
[numthreads(16, 16, 1)]
void JFARenderKernel(uint3 id: SV_DISPATCHTHREADID)
{
    float4 texSample = inTex[id.xy];
    float3 sample = texSample.xyz;
    float2 closest = texSample.xy;
    
    //get the distance to that position and render it as a color;
    //direction to point;
    float2 dir = float2(id.xy) - closest;
    float2 normalize_direction = dir / float2(rez, rez);
    normalize_direction = normalize_direction;
    
    outTex[id.xy] = float4(normalize_direction.xy, sample.z, 1.);
    //this is yellow when on the surface: xy becomes .5,.5 and the z is 0 for ugly yellow
}

//Compute the Gradient of the Texture based on the distance values
[numthreads(16, 16, 1)]
void JFAGradientKernel(uint3 id: SV_DISPATCHTHREADID)
{
    float4 center = inTex[id.xy];
    uint2 resolution = uint2(rez, rez);
    uint2 up = (id.xy + uint2(0, 1) + resolution) % resolution;
    uint2 right = (id.xy + uint2(1, 0) + resolution) % resolution;
    //rez is defined in c#
    //Use E-C and N-C as local differences
    
    float4 east = inTex[right];
    float4 north = inTex[up];
    
    //.b is distance .a is sign
    float dx = east.b * east.a - center.b * center.a;
    float dy = north.b * north.a - center.b * center.a;
    
    outTex[id.xy] = float4(center.b * center.a, dx, dy, 1.0);
    //outTex[id.xy] = float4(center.b * center.a / rez, center.b * center.a / rez, center.b * center.a / rez, 1.0);
}